import { extractCodeFromImageFile, type DecodeResult } from '@/lib/steganography';
import React, { useState } from 'react';

interface DecodeArtModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCodeDecoded: (code: string) => void;
}

export default function DecodeArtModal({ isOpen, onClose, onCodeDecoded }: DecodeArtModalProps) {
  const [file, setFile] = useState<File | null>(null);
  const [decryptionKey, setDecryptionKey] = useState('');
  const [isDecoding, setIsDecoding] = useState(false);
  const [error, setError] = useState('');
  const [decodedCode, setDecodedCode] = useState<string | null>(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile && selectedFile.type.startsWith('image/')) {
      setFile(selectedFile);
      setError('');
    } else {
      setError('Please select a valid image file.');
    }
  };

  const handleDecode = async () => {
    if (!file) {
      setError('Please select an image file.');
      return;
    }

    setIsDecoding(true);
    setError('');

    try {
      const result: DecodeResult = await extractCodeFromImageFile(file, decryptionKey || undefined);
      
      if (result.success && result.code) {
        setDecodedCode(result.code);
        setShowSuccess(true);
        onCodeDecoded(result.code);
      } else {
        // Enhanced error messages with helpful guidance
        let errorMessage = result.error || 'Failed to decode code from image.';
        
        if (errorMessage.includes('Invalid payload length') || errorMessage.includes('Not a Snippix art card')) {
          errorMessage += '\n\n💡 Make sure you uploaded an image generated by Snippix. Regular images don\'t contain hidden code.';
        } else if (errorMessage.includes('encrypted code')) {
          errorMessage += '\n\n🔐 This art card requires a password. Enter the same key used when creating it.';
        } else if (errorMessage.includes('Failed to decrypt')) {
          errorMessage += '\n\n❌ The decryption key appears to be incorrect. Please check your password.';
        } else if (errorMessage.includes('Invalid payload format')) {
          errorMessage += '\n\n🔧 The image data appears corrupted or incomplete. Try re-downloading the original art card.';
        }
        
        setError(errorMessage);
      }
    } catch (error) {
      console.error('Decode error:', error);
      setError('An unexpected error occurred while decoding the image. Please try again with a different image.');
    } finally {
      setIsDecoding(false);
    }
  };

  const handleClose = () => {
    setFile(null);
    setDecryptionKey('');
    setError('');
    setDecodedCode(null);
    setShowSuccess(false);
    setIsDecoding(false);
    setCopySuccess(false);
    onClose();
  };

  const handleCopyCode = async () => {
    if (decodedCode) {
      try {
        await navigator.clipboard.writeText(decodedCode);
        setCopySuccess(true);
        setTimeout(() => setCopySuccess(false), 2000);
      } catch (error) {
        console.error('Failed to copy code:', error);
      }
    }
  };

  const handleDownloadTxt = () => {
    if (!decodedCode) return;
    
    const blob = new Blob([decodedCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'decoded-message.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="bg-[#18181b] border border-[#b5e853]/30 rounded-xl p-8 w-full max-w-lg shadow-2xl">
        {!showSuccess ? (
          // Decode Form
          <>
            <div className="flex justify-between items-center mb-6">
              <div>
                <h2 className="text-2xl font-bold text-[#b5e853] font-mono tracking-wide uppercase flex items-center gap-3">
                  🔓 Decode Art Card
                </h2>
                <p className="text-sm text-[#b5e853]/70 font-mono mt-1">Reveal the secret code hidden in the pixels!</p>
              </div>
              <button
                onClick={handleClose}
                className="text-[#b5e853] hover:text-[#d6ff7f] text-3xl hover:scale-110 transition-all"
              >
                ×
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-[#b5e853] text-sm font-mono mb-2">
                  Select Art Card Image
                </label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileChange}
                  className="w-full text-[#b5e853] bg-[#111] border border-[#282828] rounded px-3 py-2 text-sm"
                />
              </div>

              <div>
                <label className="block text-[#b5e853] text-sm font-mono mb-2">
                  Decryption Key (Optional)
                </label>
                <input
                  type="password"
                  value={decryptionKey}
                  onChange={(e) => setDecryptionKey(e.target.value)}
                  placeholder="Enter key if image is encrypted"
                  className="w-full bg-[#111] border border-[#282828] rounded px-3 py-2 text-[#b5e853] text-sm focus:border-[#b5e853] focus:outline-none"
                />
              </div>

              {error && (
                <div className="text-red-400 text-sm font-mono whitespace-pre-line bg-red-900/20 border border-red-500/30 rounded p-3">
                  {error}
                </div>
              )}

              <div className="flex gap-3">
                <button
                  onClick={handleClose}
                  className="flex-1 py-2 border border-[#282828] text-[#b5e853] rounded font-mono hover:bg-[#282828] transition"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDecode}
                  disabled={!file || isDecoding}
                  className="flex-1 py-2 bg-[#b5e853] text-[#18181b] rounded font-mono font-bold hover:bg-[#d6ff7f] disabled:opacity-50 disabled:cursor-not-allowed transition"
                >
                  {isDecoding ? 'Decoding...' : 'Decode'}
                </button>
              </div>
            </div>
          </>
        ) : (
          <>
            <div className="flex justify-between items-center mb-6">
              <div>
                <h2 className="text-2xl font-bold text-[#b5e853] font-mono tracking-wide uppercase flex items-center gap-3">
                  🔓 Code Decoded!
                </h2>
                <p className="text-sm text-[#b5e853]/70 font-mono mt-1">Your secret message has been revealed!</p>
              </div>
              <button
                onClick={handleClose}
                className="text-[#b5e853] hover:text-[#d6ff7f] text-3xl hover:scale-110 transition-all"
              >
                ×
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-[#b5e853] text-sm font-mono mb-2">
                  Decoded Message
                </label>
                <textarea
                  value={decodedCode || ''}
                  readOnly
                  rows={8}
                  className="w-full bg-[#111] border border-[#b5e853]/30 rounded px-3 py-2 text-[#b5e853] text-sm font-mono resize-none focus:border-[#b5e853] focus:outline-none"
                />
              </div>

              <div className="flex gap-3">
                <button
                  onClick={handleClose}
                  className="flex-1 py-2 border border-[#282828] text-[#b5e853] rounded font-mono hover:bg-[#282828] transition"
                >
                  Close
                </button>
                <button
                  onClick={handleCopyCode}
                  className="flex-1 py-2 bg-[#b5e853] text-[#18181b] rounded font-mono font-bold hover:bg-[#d6ff7f] transition"
                >
                  {copySuccess ? '✓ Copied!' : ' Copy Code'}
                </button>
                <button
                  onClick={handleDownloadTxt}
                  className="flex-1 py-2 bg-[#b5e853]/20 border border-[#b5e853] text-[#b5e853] rounded font-mono font-bold hover:bg-[#b5e853]/30 transition"
                >
                  💾 Download 
                </button>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
